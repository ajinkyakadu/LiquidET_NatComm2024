function [I, phi] = generateImage(x, u, t, n, m, kappa)
%GENERATEIMAGE Generate an image using discrete cosine transform and level sets.
%   [I, phi] = GENERATEIMAGE(x, u, t, n, m, kappa) creates an image I based
%   on discrete cosine transform coefficients x, intensity levels u, thresholds
%   t, and parameters n, m, kappa. The image is generated by applying a 
%   level-set transform followed by a heaviside function to segment the image 
%   into regions defined by thresholds and intensity levels.
%
% Inputs:
%   x     : Vector of DCT coefficients or control points.
%   u     : Intensity levels corresponding to different segments.
%   t     : Thresholds for generating level-set functions.
%   n     : Desired dimensions of the output image [height, width].
%   m     : Original dimensions of the data before padding [height, width].
%   kappa : Scaling factor for the heaviside width.
%
% Outputs:
%   I    : The generated image.
%   phi  : The level-set function used to create the image.
%
% Example:
%   x = rand(100,1);
%   u = [0, 50, 100];  % Intensity levels
%   t = [0.3, 0.6];    % Thresholds
%   n = [256, 256];    % Output image size
%   m = [100, 100];    % Original size
%   kappa = 0.1;       % Heaviside parameter
%   [I, phi] = generateImage(x, u, t, n, m, kappa);
%
% Author:
%   Ajinkya Kadu
%   EMAT, University of Antwerp
% 
% May 20, 2023

% Set DCT coefficients
x = reshape(x, m);
x = padarray(x, n - m, 'post');

% Level-set function using 3D DCT and vectorization
phi = vec(dctThree(x));
epsi = kappa * (max(phi) - min(phi));  % Epsilon for Heaviside function

% Initialize heaviside function image
h = zeros(size(phi));

% Apply heaviside function and accumulate based on intensity levels
for i = 1:length(u)
    hI = heavi(phi - t(i), epsi);
    if i > 1
        h = (u(i) - u(i-1)) * hI + h;
    else
        h = u(i) * hI;
    end
end

% Generate final image by reshaping the heaviside result
I = reshape(h, n);

end
